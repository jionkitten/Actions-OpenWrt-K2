diff --git a/luci-app-passwall2/Makefile b/luci-app-passwall2/Makefile
index a0c2ed9..245bc1b 100644
--- a/luci-app-passwall2/Makefile
+++ b/luci-app-passwall2/Makefile
@@ -28,7 +28,7 @@ LUCI_TITLE:=LuCI support for PassWall 2
 LUCI_PKGARCH:=all
 LUCI_DEPENDS:=+coreutils +coreutils-base64 +coreutils-nohup +curl \
 	+ip-full +libuci-lua +lua +luci-compat +luci-lib-jsonc +resolveip +tcping \
-	+xray-core +v2ray-geoip +v2ray-geosite \
+	+xray-core \
 	+unzip \
 	+PACKAGE_$(PKG_NAME)_INCLUDE_Brook:brook \
 	+PACKAGE_$(PKG_NAME)_INCLUDE_Hysteria:hysteria \
diff --git a/luci-app-passwall2/luasrc/model/cbi/passwall2/api/gen_v2ray.lua b/luci-app-passwall2/luasrc/model/cbi/passwall2/api/gen_v2ray.lua
index 3146bce..b70886e 100644
--- a/luci-app-passwall2/luasrc/model/cbi/passwall2/api/gen_v2ray.lua
+++ b/luci-app-passwall2/luasrc/model/cbi/passwall2/api/gen_v2ray.lua
@@ -50,7 +50,8 @@ local dns = nil
 local fakedns = nil
 local inbounds = {}
 local outbounds = {}
-local routing = nil
+local routing = {}
+local observatory
 
 local function get_new_port()
     if new_port then
@@ -297,12 +298,18 @@ if true then
     end
 
     if redir_port then
+        local _sniffing
+        if remote_dns_fake then
+            _sniffing = { enabled = true, destOverride = { "fakedns" }, metadataOnly = true }
+        else
+            _sniffing = {enabled = sniffing and true or false, destOverride = { "http", "tls", (remote_dns_fake) and "fakedns"}, metadataOnly = false, routeOnly = route_only and true or nil, domainsExcluded = (sniffing and not route_only) and get_domain_excluded() or nil}
+        end
         local inbound = {
             port = tonumber(redir_port),
             protocol = "dokodemo-door",
             settings = {network = "tcp,udp", followRedirect = true},
             streamSettings = {sockopt = {tproxy = "tproxy"}},
-            sniffing = {enabled = sniffing and true or false, destOverride = {"http", "tls", (remote_dns_fake) and "fakedns"}, metadataOnly = false, routeOnly = route_only and true or nil, domainsExcluded = (sniffing and not route_only) and get_domain_excluded() or nil}
+            sniffing = _sniffing
         }
         local tcp_inbound = api.clone(inbound)
         tcp_inbound.tag = "tcp_redir"
@@ -331,6 +338,8 @@ if true then
 
             local default_node_id = node.default_node or "_direct"
             local default_outboundTag
+            local default_outboundTag_key = "outboundTag"
+            local balancers
             if default_node_id == "_direct" then
                 default_outboundTag = "direct"
             elseif default_node_id == "_blackhole" then
@@ -372,21 +381,48 @@ if true then
                         end
                     end
                 end
-                if default_node and api.is_normal_node(default_node) then
-                    local default_outbound = gen_outbound(default_node, "default", { proxy = proxy, tag = proxy_tag })
-                    if default_outbound then
-                        table.insert(outbounds, default_outbound)
-                        default_outboundTag = "default"
+                if default_node then
+                    if default_node.protocol == "_balancing" then
+                        if default_node.balancing_node then
+                            local bnodes = default_node.balancing_node
+                            local length = #bnodes
+                            local outbound_tags = {}
+                            for i = 1, length do
+                                table.insert(outbound_tags, bnodes[i])
+                                local bnode = uci:get_all(appname, bnodes[i])
+                                local outbound = gen_outbound(bnode)
+                                if outbound then
+                                  table.insert(outbounds, outbound)
+                                end
+                            end
+                            balancers = { {tag = "balancer", selector = bnodes, strategy = { type = "leastPing" }} }
+                            default_outboundTag_key = "balancerTag"
+                            default_outboundTag = "balancer"
+                            observatory = {
+                              subjectSelector = outbound_tags,
+                              probeURL = "https://www.google.com/generate_204",
+                              probeInterval = "30s",
+                            }
+                        end
+                    elseif api.is_normal_node(default_node) then
+                        local default_outbound = gen_outbound(default_node, "default", { proxy = proxy, tag = proxy_tag })
+                        if default_outbound then
+                            table.insert(outbounds, default_outbound)
+                            default_outboundTag = "default"
+                        end
                     end
+
                 end
             end
 
+            -- TODO: support balancer
             uci:foreach(appname, "shunt_rules", function(e)
                 local name = e[".name"]
                 if name and e.remarks then
                     local _node_id = node[name] or "nil"
                     local proxy_tag = node[name .. "_proxy_tag"] or "nil"
                     local outboundTag
+                    local outboundTag_key = "outboundTag"
                     if _node_id == "_direct" then
                         outboundTag = "direct"
                     elseif _node_id == "_blackhole" then
@@ -427,7 +463,7 @@ if true then
                                             table.insert(rules, 1, {
                                                 type = "field",
                                                 inboundTag = {"proxy_" .. name},
-                                                outboundTag = proxy_tag
+                                                [outboundTag_key] = proxy_tag
                                             })
                                         end
                                     end
@@ -443,6 +479,7 @@ if true then
                     if outboundTag then
                         if outboundTag == "default" then 
                             outboundTag = default_outboundTag
+                            outboundTag_key = default_outboundTag_key
                         end
                         local protocols = nil
                         if e["protocol"] and e["protocol"] ~= "" then
@@ -489,7 +526,7 @@ if true then
                         local rule = {
                             _flag = e.remarks,
                             type = "field",
-                            outboundTag = outboundTag,
+                            [outboundTag_key] = outboundTag,
                             network = e["network"] or "tcp,udp",
                             source = source,
                             sourcePort = e["sourcePort"] ~= "" and e["sourcePort"] or nil,
@@ -519,7 +556,7 @@ if true then
                 table.insert(rules, {
                     _flag = "defalut",
                     type = "field",
-                    outboundTag = default_outboundTag,
+                    [default_outboundTag_key] = default_outboundTag,
                     network = "tcp,udp"
                 })
             end
@@ -527,6 +564,7 @@ if true then
             routing = {
                 domainStrategy = node.domainStrategy or "AsIs",
                 domainMatcher = node.domainMatcher or "hybrid",
+                balancers = balancers,
                 rules = rules
             }
         elseif node.protocol == "_balancing" then
@@ -816,7 +854,8 @@ if inbounds or outbounds then
             --     statsInboundUplink = false,
             --     statsInboundDownlink = false
             -- }
-        }
+        },
+        observatory = observatory,
     }
     table.insert(outbounds, {
         protocol = "freedom",
diff --git a/luci-app-passwall2/luasrc/model/cbi/passwall2/client/global.lua b/luci-app-passwall2/luasrc/model/cbi/passwall2/client/global.lua
index c3321ec..d08900c 100644
--- a/luci-app-passwall2/luasrc/model/cbi/passwall2/client/global.lua
+++ b/luci-app-passwall2/luasrc/model/cbi/passwall2/client/global.lua
@@ -84,7 +84,7 @@ if (has_v2ray or has_xray) and #nodes_table > 0 then
     local normal_list = {}
     local shunt_list = {}
     for k, v in pairs(nodes_table) do
-        if v.node_type == "normal" then
+        if v.node_type == "normal" or (v.protocol and v.protocol == '_balancing') then
             normal_list[#normal_list + 1] = v
         end
         if v.protocol and v.protocol == "_shunt" then
diff --git a/luci-app-passwall2/luasrc/model/cbi/passwall2/client/node_config.lua b/luci-app-passwall2/luasrc/model/cbi/passwall2/client/node_config.lua
index d6893e2..5a4846c 100644
--- a/luci-app-passwall2/luasrc/model/cbi/passwall2/client/node_config.lua
+++ b/luci-app-passwall2/luasrc/model/cbi/passwall2/client/node_config.lua
@@ -111,13 +111,20 @@ protocol:depends("type", "V2ray")
 protocol:depends("type", "Xray")
 
 local nodes_table = {}
+local balancers = {}
+local nodes_with_balancers = {}
 for k, e in ipairs(api.get_valid_nodes()) do
-    if e.node_type == "normal" then
-        nodes_table[#nodes_table + 1] = {
-            id = e[".name"],
-            remarks = e["remark"]
-        }
-    end
+  local node = {
+    id = e[".name"],
+    remarks = e["remark"]
+  }
+  if e.node_type == "normal" then
+    nodes_table[#nodes_table + 1] = node
+    nodes_with_balancers[#nodes_with_balancers + 1] = node
+  elseif e.protocol and e.protocol == "_balancing" then
+    balancers[#balancers + 1] = node
+    nodes_with_balancers[#nodes_with_balancers + 1] = node
+  end
 end
 
 -- 负载均衡列表
@@ -135,14 +142,14 @@ uci:foreach(appname, "shunt_rules", function(e)
         o:value("_blackhole", translate("Blackhole"))
         o:depends("protocol", "_shunt")
 
-        if #nodes_table > 0 then
+        if #nodes_with_balancers > 0 then
             _proxy_tag = s:option(ListValue, e[".name"] .. "_proxy_tag", string.format('* <a style="color:red">%s</a>', e.remarks .. " " .. translate("Preproxy")))
             _proxy_tag:value("nil", translate("Close"))
             _proxy_tag:value("default", translate("Default"))
             _proxy_tag:value("main", translate("Default Preproxy"))
             _proxy_tag.default = "nil"
 
-            for k, v in pairs(nodes_table) do
+            for k, v in pairs(nodes_with_balancers) do
                 o:value(v.id, v.remarks)
                 _proxy_tag:depends(e[".name"], v.id)
             end
@@ -160,7 +167,7 @@ shunt_tips:depends("protocol", "_shunt")
 default_node = s:option(ListValue, "default_node", string.format('* <a style="color:red">%s</a>', translate("Default")))
 default_node:value("_direct", translate("Direct Connection"))
 default_node:value("_blackhole", translate("Blackhole"))
-for k, v in pairs(nodes_table) do default_node:value(v.id, v.remarks) end
+for k, v in pairs(nodes_with_balancers) do default_node:value(v.id, v.remarks) end
 default_node:depends("protocol", "_shunt")
 
 if #nodes_table > 0 then
diff --git a/luci-app-passwall2/root/etc/hotplug.d/iface/98-passwall2 b/luci-app-passwall2/root/etc/hotplug.d/iface/98-passwall2
index f3fe8ef..362dc69 100644
--- a/luci-app-passwall2/root/etc/hotplug.d/iface/98-passwall2
+++ b/luci-app-passwall2/root/etc/hotplug.d/iface/98-passwall2
@@ -1,7 +1,7 @@
 #!/bin/sh
 
-[[ "$ACTION" == "ifup" && "$INTERFACE" == "wan" && $(uci get "passwall2.@global[0].enabled") == "1" ]] && {
-    /etc/init.d/passwall2 restart
-    echo "passwall2: restart when wan ifup" > /dev/kmsg
-}
+# [[ "$ACTION" == "ifup" && "$INTERFACE" == "wan" && $(uci get "passwall2.@global[0].enabled") == "1" ]] && {
+#     /etc/init.d/passwall2 restart
+#     echo "passwall2: restart when wan ifup" > /dev/kmsg
+# }
 
diff --git a/luci-app-passwall2/root/etc/init.d/passwall2 b/luci-app-passwall2/root/etc/init.d/passwall2
index 43fc99c..1bb9574 100755
--- a/luci-app-passwall2/root/etc/init.d/passwall2
+++ b/luci-app-passwall2/root/etc/init.d/passwall2
@@ -39,6 +39,7 @@ boot() {
 start() {
 	set_lock
 	[ $? == 1 ] && $APP_FILE echolog "脚本已经在运行，不重复运行，退出." && exit 0
+  /usr/sbin/ipset restore -file /usr/share/passwall2/custom_proxy_ips -!
 	$APP_FILE start
 	unset_lock
 }
diff --git a/luci-app-passwall2/root/usr/share/passwall2/app.sh b/luci-app-passwall2/root/usr/share/passwall2/app.sh
index 038a2ec..29324be 100755
--- a/luci-app-passwall2/root/usr/share/passwall2/app.sh
+++ b/luci-app-passwall2/root/usr/share/passwall2/app.sh
@@ -521,7 +521,7 @@ node_switch() {
 
 			#uci set $CONFIG.@global[0].node=$node
 			#uci commit $CONFIG
-			source $APP_PATH/helper_dnsmasq.sh logic_restart no_log=1
+      # source $APP_PATH/helper_dnsmasq.sh logic_restart no_log=1
 		}
 	}
 }
@@ -594,8 +594,8 @@ run_global() {
 	msg="${msg}）"
 	echolog ${msg}
 	
-	source $APP_PATH/helper_dnsmasq.sh stretch
-	source $APP_PATH/helper_dnsmasq.sh add TMP_DNSMASQ_PATH=$TMP_DNSMASQ_PATH DNSMASQ_CONF_FILE=/tmp/dnsmasq.d/dnsmasq-passwall2.conf DEFAULT_DNS=$AUTO_DNS LOCAL_DNS=$LOCAL_DNS TUN_DNS=$TUN_DNS
+	# source $APP_PATH/helper_dnsmasq.sh stretch
+	# source $APP_PATH/helper_dnsmasq.sh add TMP_DNSMASQ_PATH=$TMP_DNSMASQ_PATH DNSMASQ_CONF_FILE=/tmp/dnsmasq.d/dnsmasq-passwall2.conf DEFAULT_DNS=$AUTO_DNS LOCAL_DNS=$LOCAL_DNS TUN_DNS=$TUN_DNS
 
 	V2RAY_CONFIG=$TMP_PATH/global.json
 	V2RAY_LOG=$TMP_PATH/global.log
@@ -750,7 +750,7 @@ start() {
 		else
 			run_global
 			source $APP_PATH/iptables.sh start
-			source $APP_PATH/helper_dnsmasq.sh logic_restart
+			# source $APP_PATH/helper_dnsmasq.sh logic_restart
 			sysctl -w net.bridge.bridge-nf-call-iptables=0 >/dev/null 2>&1
 			[ "$PROXY_IPV6" == "1" ] && sysctl -w net.bridge.bridge-nf-call-ip6tables=0 >/dev/null 2>&1
 		fi
@@ -768,8 +768,8 @@ stop() {
 	unset V2RAY_LOCATION_ASSET
 	unset XRAY_LOCATION_ASSET
 	stop_crontab
-	source $APP_PATH/helper_dnsmasq.sh del
-	source $APP_PATH/helper_dnsmasq.sh restart no_log=1
+	# source $APP_PATH/helper_dnsmasq.sh del
+	# source $APP_PATH/helper_dnsmasq.sh restart no_log=1
 	rm -rf ${TMP_PATH}
 	rm -rf /tmp/lock/${CONFIG}_script.lock
 	echolog "清空并关闭相关程序和缓存完成。"
diff --git a/luci-app-passwall2/root/usr/share/passwall2/iptables.sh b/luci-app-passwall2/root/usr/share/passwall2/iptables.sh
index ca7f67a..7026c2e 100755
--- a/luci-app-passwall2/root/usr/share/passwall2/iptables.sh
+++ b/luci-app-passwall2/root/usr/share/passwall2/iptables.sh
@@ -564,6 +564,39 @@ dns_hijack() {
 }
 
 add_firewall_rule() {
+  echolog "开始加载防火墙规则..."
+
+  $ipt_m -N PSW2_DIVERT
+  $ipt_m -A PSW2_DIVERT -j MARK --set-mark 1
+  $ipt_m -A PSW2_DIVERT -j ACCEPT
+
+  $ipt_m -N PSW2_RULE
+  $ipt_m -A PSW2_RULE -j CONNMARK --restore-mark
+  $ipt_m -A PSW2_RULE -m mark --mark 1 -j RETURN
+  $ipt_m -A PSW2_RULE -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j MARK --set-xmark 1
+  $ipt_m -A PSW2_RULE -p udp -m conntrack --ctstate NEW -j MARK --set-xmark 1
+  $ipt_m -A PSW2_RULE -j CONNMARK --save-mark
+
+  $ipt_m -N PSW2
+  insert_rule_before "$ipt_m" "PREROUTING" "mwan3" "-j PSW2"
+  insert_rule_before "$ipt_m" "PREROUTING" "PSW2" "-p tcp -m socket -j PSW2_DIVERT"
+  $ipt_m -A PSW2 -p tcp $(dst proxy_ips) -j PSW2_RULE
+  $ipt_m -A PSW2 -p udp $(dst proxy_ips) -j PSW2_RULE
+  $ipt_m -A PSW2 -p tcp -m mark --mark 1 $(REDIRECT $REDIR_PORT TPROXY)
+  $ipt_m -A PSW2 -p udp -m mark --mark 1 $(REDIRECT $REDIR_PORT TPROXY)
+
+  $ipt_m -N PSW2_OUTPUT
+  insert_rule_before "$ipt_m" "OUTPUT" "mwan3" "$(comment mangle-OUTPUT-PSW2) -p tcp -j PSW2_OUTPUT"
+  insert_rule_before "$ipt_m" "OUTPUT" "mwan3" "$(comment mangle-OUTPUT-PSW2) -p udp -j PSW2_OUTPUT"
+  $ipt_m -A PSW2_OUTPUT -m mark --mark 0xff -j RETURN
+  $ipt_m -A PSW2_OUTPUT -p tcp $(dst proxy_ips) -j PSW2_RULE
+  $ipt_m -A PSW2_OUTPUT -p udp $(dst proxy_ips) -j PSW2_RULE
+
+  ip rule add fwmark 1 lookup 100
+  ip route add local 0.0.0.0/0 dev lo table 100
+}
+
+_add_firewall_rule() {
 	echolog "开始加载防火墙规则..."
 	ipset -! create $IPSET_LANIPLIST nethash maxelem 1048576
 	ipset -! create $IPSET_VPSIPLIST nethash maxelem 1048576
